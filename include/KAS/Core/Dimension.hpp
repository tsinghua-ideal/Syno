#pragma once

#include <compare>
#include <string>
#include <vector>

#include "KAS/Core/Size.hpp"


namespace kas {

enum class DimensionType {
// Repeat-like:
    Shift,
    Stride,
// Split-like:
    Split,
    Unfold,
// Merge-like:
    Merge,
    Share,
// Iterator:
    Iterator,
// Hidden iterators generated by MapReduce
    MapReduce,
};

class DimensionImpl {
public:
    virtual const Size& size() const noexcept = 0;
    virtual std::size_t initialHash() const noexcept = 0;
    virtual DimensionType type() const noexcept = 0;
    virtual ~DimensionImpl() = default;
};

class Dimension {
public:
    using PointerType = DimensionImpl *;
protected:
    // Require that same `DimensionImpl`s have same address, i.e., uniqued.
    PointerType inner;
public:
    inline Dimension(PointerType inner): inner { inner } {}
    inline PointerType get() const noexcept { return inner; }
    inline const Size& size() const noexcept { return inner->size(); }
    // Checks the underlying type of the dimension.
    inline bool is(DimensionType ty) const noexcept { return inner->type() == ty; }
    bool operator==(const Dimension& other) const = default;
    // Sort the dimensions in an interface to obtain hash for it.
    std::strong_ordering operator<=>(const Dimension& other) const = default;
    std::string description(const BindingContext& ctx) const;
};

using Interface = std::vector<Dimension>;

} // namespace kas

template<>
struct std::hash<kas::Dimension> {
    inline std::size_t operator()(const kas::Dimension& dimension) const noexcept {
        return std::hash<kas::Dimension::PointerType>{}(dimension.get());
    }
};
