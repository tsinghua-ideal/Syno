#include <cstddef>
#include <cstdint>
#include <vector>

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/stl/filesystem.h>

#ifdef KAS_USE_HALIDE

#include <torch/extension.h>

#include "Loader.hpp"

std::vector<at::Tensor *> ConvertArgsToTensors(pybind11::args& args) {
    std::vector<at::Tensor *> tensors;
    tensors.reserve(args.size());
    for (auto& arg: args) {
        at::Tensor& buffer = const_cast<at::Tensor&>(THPVariable_Unpack(arg.ptr()));
        tensors.emplace_back(&buffer);
    }
    return tensors;
}

#else

namespace kas {

struct LoaderArgs {};
struct Loader {};

} // namespace kas

#endif

PYBIND11_MODULE(kas_runtime, m) {
    m.doc() = "A loader for kernels generated by KAS.";

    using namespace kas;

#ifdef KAS_USE_HALIDE
    pybind11::class_<LoaderArgs>(m, "LoaderArgs")
        .def(pybind11::init<std::filesystem::path, std::string, bool, std::size_t, std::size_t, std::vector<std::size_t>>());

    pybind11::class_<Loader>(m, "Loader")
        .def(pybind11::init<LoaderArgs>())
        .def(
            "forward",
            [](const Loader& self, std::size_t index, pybind11::args args) {
                auto tensors = ConvertArgsToTensors(args);
                return self.forward(index, tensors);
            },
            pybind11::arg("index")
        )
        .def(
            "backward", 
            [](const Loader& self, std::size_t index, pybind11::args args) {
                auto tensors = ConvertArgsToTensors(args);
                return self.backward(index, tensors);
            },
            pybind11::arg("index")
        );
#else
    pybind11::class_<LoaderArgs>(m, "LoaderArgs")
        .def(pybind11::init([](std::filesystem::path, std::string, bool, std::size_t, std::size_t, std::vector<std::size_t>) -> LoaderArgs {
            throw std::runtime_error("KAS is not built with Halide. To use LoaderArgs, please rebuild KAS with Halide.");
        }));

    pybind11::class_<Loader>(m, "Loader")
        .def(pybind11::init([](LoaderArgs) -> Loader {
            throw std::runtime_error("KAS is not built with Halide. To use Loader, please rebuild KAS with Halide.");
        }));
#endif
}
